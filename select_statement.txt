> Write out a generic SELECT statement.

SELECT <column1, column2, ... *>
FROM <table1, table2 ...>
<optional: WHERE <condition>>

> Create a fun way to remember the order of operations in a SELECT statement, such as a mnemonic.


> Given this dogs table, write queries to select the following pieces of data:
Intake teams typically guess the breed of shelter dogs, so the breed column may have multiple words (for example, "Labrador Collie mix").

•  Display the name, gender, and age of all dogs that are part Labrador.

SELECT name, gender, age
FROM dogs
WHERE breed LIKE '%Labrador%';

•  Display the ids of all dogs that are under 1 year old.

SELECT id
FROM dogs
WHERE age < 1;

•  Display the name and age of all dogs that are female and over 35lbs.

SELECT name, age
FROM dogs
WHERE gender='female'
AND weight > 35;

•  Display all of the information about all dogs that are not Shepherd mixes.

SELECT *
FROM dogs
WHERE breed NOT LIKE '%shepherd%';


•  Display the id, age, weight, and breed of all dogs that are either over 60lbs or Great Danes.

SELECT id, age, weight, breed
FROM dogs
WHERE weight > 60
OR breed LIKE '%Great Danes%';

> Given this cats table, what records are returned from these queries?

•  SELECT name, adoption_date FROM cats;
name	adoption_date
Mushi	2016-03-22T00:00:00.000Z
Seashell	null
Azul	2016-04-17T00:00:00.000Z
Victoire	2016-09-01T00:00:00.000Z
Nala	null

•  SELECT name, age FROM cats;
name	age
Mushi	1
Seashell	7
Azul	3
Victoire	7
Nala	1

> From the cats table, write queries to select the following pieces of data.

•  Display all the information about all of the available cats.
SELECT * from cats;

•  Display the name and sex of all cats who are 7 years old.
SELECT name, gender FROM cats WHERE age=7;

•  Find all of the names of the cats, so you don’t choose duplicate names for new cats.
SELECT name FROM cats;

> List each comparison operator and explain when you would use it. Include a real world example for each.
Comparison operators for numeric types:
Less than: <, example: age < 5
Greater than: >, example: score > 80
Less than or equal to: height <= 65
Greater than or equal to: speed >= 100

Numeric types & string types:
Is not: flowers != 'yellow'
Equal to: city='San Francisco'

String types:
SELECT, FROM, WHERE, LIKE, OR, AND
SELECT name FROM address_book WHERE last_name LIKE '%S' OR last_name LIKE='%Z';

> From the cats table, what data is returned from these queries?
•  SELECT name FROM cats WHERE gender = ‘F’;
Query Error: error: column "‘f’" does not exist

•  SELECT name FROM cats WHERE age <> 3;
name
Mushi
Seashell
Victoire
Nala

•  SELECT ID FROM cats WHERE name != ‘Mushi’ AND gender = ‘M’;
Query Error: error: column "‘mushi’" does not exist
